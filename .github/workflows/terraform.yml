name: 'GCP Cost-Optimized Infrastructure Deployment'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.5.0"
  OPA_VERSION: "0.68.0"

jobs:
  terraform-compliance:
    name: Terraform Plan and OPA Policy Validation
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Setup OPA
      run: |
        wget https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static
        chmod +x opa_linux_amd64_static
        sudo mv opa_linux_amd64_static /usr/local/bin/opa
        opa version
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true
    
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
    
    - name: Terraform Validate
      run: terraform validate
    
    - name: Create terraform.tfvars from secrets
      run: |
        cat > terraform.tfvars << EOF
        project_id = "${{ secrets.GCP_PROJECT_ID }}"
        region = "us-central1"
        bucket_name = "${{ secrets.GCP_PROJECT_ID }}-compliance-bucket-${{ github.run_number }}"
        environment = "production"
        instance_name = "cost-optimized-vm-prod"
        machine_type = "e2-micro"
        zone = "us-central1-a"
        boot_disk_image = "ubuntu-os-cloud/ubuntu-2004-lts"
        boot_disk_size = 10
        EOF

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
    
    - name: Convert Terraform Plan to JSON
      run: |
        terraform show -json tfplan > tfplan.json
        echo "Terraform plan converted to JSON successfully"
    
    - name: Display Terraform Plan JSON (for debugging)
      run: |
        echo "=== Terraform Plan JSON ==="
        cat tfplan.json | jq '.'
      continue-on-error: true
    
    - name: OPA Policy Validation - Storage
      id: storage-policy
      run: |
        echo "Running storage policy validation..."
        opa eval -d policy/storagepolicy.rego -i tfplan.json "data.terraform.gcs.policy_summary" > storage_policy_result.json 2>&1
        
        echo "=== Storage Policy Results ==="
        cat storage_policy_result.json | jq '.'
        
        # Check compliance
        VIOLATIONS=$(cat storage_policy_result.json | jq -r '.result[0].expressions[0].value.total_violations // 0')
        COMPLIANT=$(cat storage_policy_result.json | jq -r '.result[0].expressions[0].value.compliant // false')
        
        echo "Storage Policy - Violations: $VIOLATIONS, Compliant: $COMPLIANT"
        echo "storage_compliant=$COMPLIANT" >> $GITHUB_OUTPUT
        
        if [ "$VIOLATIONS" -gt 0 ]; then
          echo "‚ùå Storage policy violations found!"
          cat storage_policy_result.json | jq -r '.result[0].expressions[0].value.violations[]? // empty'
        else
          echo "‚úÖ Storage policy validation passed!"
        fi

    - name: OPA Policy Validation - Compute
      id: compute-policy
      run: |
        echo "Running compute policy validation..."
        opa eval -d policy/computepolicy.rego -i tfplan.json "data.terraform.compute.policy_summary" > compute_policy_result.json 2>&1
        
        echo "=== Compute Policy Results ==="
        cat compute_policy_result.json | jq '.'
        
        # Check compliance
        VIOLATIONS=$(cat compute_policy_result.json | jq -r '.result[0].expressions[0].value.total_violations // 0')
        WARNINGS=$(cat compute_policy_result.json | jq -r '.result[0].expressions[0].value.total_warnings // 0')
        COMPLIANT=$(cat compute_policy_result.json | jq -r '.result[0].expressions[0].value.compliant // false')
        
        echo "Compute Policy - Violations: $VIOLATIONS, Warnings: $WARNINGS, Compliant: $COMPLIANT"
        echo "compute_compliant=$COMPLIANT" >> $GITHUB_OUTPUT
        
        if [ "$VIOLATIONS" -gt 0 ]; then
          echo "‚ùå Compute policy violations found!"
          cat compute_policy_result.json | jq -r '.result[0].expressions[0].value.violations[]? // empty'
        else
          echo "‚úÖ Compute policy validation passed!"
          if [ "$WARNINGS" -gt 0 ]; then
            echo "‚ö†Ô∏è Warnings detected:"
            cat compute_policy_result.json | jq -r '.result[0].expressions[0].value.warnings[]? // empty'
          fi
        fi

    - name: Overall Compliance Check
      id: policy-check
      run: |
        STORAGE_COMPLIANT="${{ steps.storage-policy.outputs.storage_compliant }}"
        COMPUTE_COMPLIANT="${{ steps.compute-policy.outputs.compute_compliant }}"
        
        echo "Storage Compliant: $STORAGE_COMPLIANT"
        echo "Compute Compliant: $COMPUTE_COMPLIANT"
        
        if [ "$STORAGE_COMPLIANT" == "true" ] && [ "$COMPUTE_COMPLIANT" == "true" ]; then
          echo "‚úÖ All policies passed! Infrastructure is compliant."
          echo "compliant=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Policy violations detected! Deployment blocked."
          echo "compliant=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Calculate Cost Estimate
      run: |
        echo "üí∞ Cost Estimation for Deployment:"
        echo "=================================="
        echo "‚Ä¢ Preemptible e2-micro instance: ~$3.50/month"
        echo "‚Ä¢ Boot disk (10GB standard): ~$0.40/month"
        echo "‚Ä¢ Cloud Storage bucket: ~$0.02/month (for minimal usage)"
        echo "‚Ä¢ Total estimated cost: ~$3.92/month"
        echo ""
        echo "Note: Actual costs will be lower due to:"
        echo "- Preemptible instance interruptions"
        echo "- Always Free tier usage (if eligible)"
        echo "- Actual usage patterns"
    
    - name: Comment PR with Policy Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            let comment = `## üèóÔ∏è Cost-Optimized Infrastructure Deployment Results\n\n`;
            
            // Format check
            comment += `**Terraform Format:** ‚úÖ\n`;
            comment += `**Terraform Validation:** ‚úÖ\n\n`;
            
            // Storage Policy
            try {
              const storageResult = JSON.parse(fs.readFileSync('storage_policy_result.json', 'utf8'));
              const storageData = storageResult.result[0].expressions[0].value;
              
              comment += `### ü™£ Storage Policy Validation\n`;
              if (storageData.compliant) {
                comment += `‚úÖ **Compliant** - No violations detected\n`;
              } else {
                comment += `‚ùå **Non-Compliant** - ${storageData.total_violations} violation(s)\n`;
                if (storageData.violations) {
                  storageData.violations.forEach(violation => {
                    comment += `- ${violation}\n`;
                  });
                }
              }
            } catch (e) {
              comment += `### ü™£ Storage Policy Validation\n‚ùì Unable to parse results\n`;
            }
            
            // Compute Policy
            try {
              const computeResult = JSON.parse(fs.readFileSync('compute_policy_result.json', 'utf8'));
              const computeData = computeResult.result[0].expressions[0].value;
              
              comment += `\n### üñ•Ô∏è Compute Policy Validation\n`;
              if (computeData.compliant) {
                comment += `‚úÖ **Compliant** - No violations detected\n`;
                if (computeData.total_warnings > 0) {
                  comment += `‚ö†Ô∏è **Warnings:** ${computeData.total_warnings}\n`;
                  if (computeData.warnings) {
                    computeData.warnings.forEach(warning => {
                      comment += `- ${warning}\n`;
                    });
                  }
                }
              } else {
                comment += `‚ùå **Non-Compliant** - ${computeData.total_violations} violation(s)\n`;
                if (computeData.violations) {
                  computeData.violations.forEach(violation => {
                    comment += `- ${violation}\n`;
                  });
                }
              }
            } catch (e) {
              comment += `\n### üñ•Ô∏è Compute Policy Validation\n‚ùì Unable to parse results\n`;
            }
            
            // Cost Estimate
            comment += `\n### üí∞ Cost Estimate\n`;
            comment += `- **Preemptible e2-micro**: ~$3.50/month\n`;
            comment += `- **Boot disk (10GB)**: ~$0.40/month\n`;
            comment += `- **Storage bucket**: ~$0.02/month\n`;
            comment += `- **Total**: ~$3.92/month\n\n`;
            comment += `*Note: Costs will be lower due to preemptible interruptions and free tier usage*\n`;
            
            // Overall Status
            const compliant = '${{ steps.policy-check.outputs.compliant }}' === 'true';
            const overallStatus = compliant ? '‚úÖ Ready for deployment' : '‚ùå Deployment blocked due to policy violations';
            comment += `\n**Overall Status:** ${overallStatus}\n`;
            
            comment += '\n---\n*This comment was automatically generated by the cost-optimized infrastructure workflow.*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Error creating PR comment:', error);
          }
    
    - name: Terraform Apply (only if compliant and on main branch)
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "‚úÖ All compliance checks passed. Proceeding with terraform apply..."
        terraform apply -auto-approve tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Terraform Destroy (manual trigger only)
      if: github.event.inputs.action == 'destroy'
      run: |
        echo "üî• Destroying infrastructure..."
        terraform destroy -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Post-Deployment Validation
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.action != 'destroy'
      run: |
        echo "üîç Validating deployment..."
        
        # Check if compute instance was created
        INSTANCE_NAME=$(terraform output -raw instance_name 2>/dev/null || echo "")
        if [ -n "$INSTANCE_NAME" ]; then
          echo "‚úÖ Compute instance '$INSTANCE_NAME' created successfully"
          
          # Get instance details
          INSTANCE_ZONE=$(terraform output -raw instance_zone 2>/dev/null || echo "")
          INSTANCE_IP=$(terraform output -raw instance_internal_ip 2>/dev/null || echo "")
          
          echo "üìç Zone: $INSTANCE_ZONE"
          echo "üåê Internal IP: $INSTANCE_IP"
          
          # Verify cost optimization features
          echo "üí∞ Cost optimization features:"
          terraform output -json cost_optimization_features | jq -r '
            "  ‚Ä¢ Preemptible: " + (.preemptible | tostring) +
            "\n  ‚Ä¢ Machine Type: " + .machine_type +
            "\n  ‚Ä¢ Disk Type: " + .disk_type +
            "\n  ‚Ä¢ Disk Size: " + .disk_size'
        fi
        
        # Check bucket
        BUCKET_NAME=$(terraform output -raw bucket_name 2>/dev/null || echo "")
        if [ -n "$BUCKET_NAME" ]; then
          echo "‚úÖ Storage bucket '$BUCKET_NAME' created successfully"
        fi

    - name: Cost Monitoring Recommendations
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push' && github.event.inputs.action != 'destroy'
      run: |
        echo "üìä Cost Monitoring Setup Recommendations:"
        echo "1. Visit: https://console.cloud.google.com/billing/"
        echo "2. Set up billing alerts for budget limits"
        echo "3. Monitor using: gcloud compute instances list"
        echo ""
        echo "üí° Cost optimization tips:"
        echo "- Stop instances when not in use: gcloud compute instances stop INSTANCE_NAME"
        echo "- Use sustained use discounts for long-running workloads"
        echo "- Monitor preemptible instance interruptions"
        echo "- Consider committed use discounts for predictable workloads"
    
    - name: Upload Terraform Plan Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.run_number }}
        path: |
          tfplan.json
          storage_policy_result.json
          compute_policy_result.json
        retention-days: 30