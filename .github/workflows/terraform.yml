name: Terraform GCP Compliance Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_VERSION: "1.5.0"
  OPA_VERSION: "0.68.0"

jobs:
  terraform-compliance:
    name: Terraform Plan and OPA Policy Validation
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Setup OPA
      run: |
        wget https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static
        chmod +x opa_linux_amd64_static
        sudo mv opa_linux_amd64_static /usr/local/bin/opa
        opa version
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true
    
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
    
    - name: Terraform Validate
      run: terraform validate
    
    - name: Terraform Plan
      run: |
        terraform plan \
          -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
          -var="bucket_name=${{ secrets.GCP_PROJECT_ID }}-compliance-bucket-${{ github.run_number }}" \
          -out=tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
    
    - name: Convert Terraform Plan to JSON
      run: |
        terraform show -json tfplan > tfplan.json
        echo "Terraform plan converted to JSON successfully"
    
    - name: Display Terraform Plan JSON (for debugging)
      run: |
        echo "=== Terraform Plan JSON ==="
        cat tfplan.json | jq '.'
      continue-on-error: true
    
    - name: Run OPA Policy Validation
      run: |
        echo "Running OPA policy validation..."
        
        # Run OPA evaluation and capture output
        opa eval -d policy/ -i tfplan.json "data.terraform.gcs.policy_summary" > opa_result.json 2>&1
        
        echo "=== OPA Policy Results ==="
        cat opa_result.json | jq '.'
        
        # Check if there are violations using the correct JSON path
        VIOLATIONS=$(cat opa_result.json | jq -r '.result[0].expressions[0].value.total_violations // 0')
        
        if [ "$VIOLATIONS" -gt 0 ]; then
          echo "❌ Policy violations found: $VIOLATIONS"
          echo "=== Violation Details ==="
          cat opa_result.json | jq -r '.result[0].expressions[0].value.violations[]? // empty'
          exit 1
        else
          echo "✅ No policy violations found. Plan is compliant!"
        fi
    
    - name: Comment PR with Policy Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const opaResult = JSON.parse(fs.readFileSync('opa_result.json', 'utf8'));
            const violations = opaResult.result.total_violations;
            const compliant = opaResult.result.compliant;
            
            let comment = '## 🛡️ Terraform Compliance Check Results\n\n';
            
            if (compliant) {
              comment += '✅ **All policy checks passed!**\n\n';
              comment += `- Total violations: ${violations}\n`;
              comment += '- Status: Compliant ✅\n';
            } else {
              comment += '❌ **Policy violations detected!**\n\n';
              comment += `- Total violations: ${violations}\n`;
              comment += '- Status: Non-compliant ❌\n\n';
              comment += '### Violations:\n';
              opaResult.result.violations.forEach(violation => {
                comment += `- ${violation}\n`;
              });
            }
            
            comment += '\n---\n*This comment was automatically generated by the Terraform compliance workflow.*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Error reading OPA result:', error);
          }
    
    - name: Terraform Apply (only if compliant and on main branch)
      if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "✅ All compliance checks passed. Proceeding with terraform apply..."
        terraform apply -auto-approve tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
    
    - name: Upload Terraform Plan Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.run_number }}
        path: |
          tfplan.json
          opa_result.json
        retention-days: 30